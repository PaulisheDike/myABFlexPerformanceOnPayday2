/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1797.0, "minX": 0.0, "maxY": 74580.0, "series": [{"data": [[0.0, 1797.0], [0.1, 2218.0], [0.2, 2226.0], [0.3, 2230.0], [0.4, 2233.0], [0.5, 2233.0], [0.6, 2235.0], [0.7, 2236.0], [0.8, 2237.0], [0.9, 2238.0], [1.0, 2239.0], [1.1, 2241.0], [1.2, 2241.0], [1.3, 2243.0], [1.4, 2244.0], [1.5, 2245.0], [1.6, 2246.0], [1.7, 2247.0], [1.8, 2247.0], [1.9, 2247.0], [2.0, 2248.0], [2.1, 2248.0], [2.2, 2249.0], [2.3, 2249.0], [2.4, 2249.0], [2.5, 2250.0], [2.6, 2250.0], [2.7, 2251.0], [2.8, 2251.0], [2.9, 2251.0], [3.0, 2251.0], [3.1, 2252.0], [3.2, 2253.0], [3.3, 2254.0], [3.4, 2254.0], [3.5, 2255.0], [3.6, 2255.0], [3.7, 2255.0], [3.8, 2256.0], [3.9, 2257.0], [4.0, 2257.0], [4.1, 2257.0], [4.2, 2258.0], [4.3, 2258.0], [4.4, 2258.0], [4.5, 2259.0], [4.6, 2259.0], [4.7, 2259.0], [4.8, 2259.0], [4.9, 2260.0], [5.0, 2260.0], [5.1, 2261.0], [5.2, 2261.0], [5.3, 2262.0], [5.4, 2263.0], [5.5, 2263.0], [5.6, 2263.0], [5.7, 2264.0], [5.8, 2264.0], [5.9, 2264.0], [6.0, 2265.0], [6.1, 2265.0], [6.2, 2265.0], [6.3, 2266.0], [6.4, 2266.0], [6.5, 2266.0], [6.6, 2266.0], [6.7, 2266.0], [6.8, 2267.0], [6.9, 2267.0], [7.0, 2267.0], [7.1, 2267.0], [7.2, 2268.0], [7.3, 2268.0], [7.4, 2268.0], [7.5, 2268.0], [7.6, 2269.0], [7.7, 2269.0], [7.8, 2270.0], [7.9, 2270.0], [8.0, 2270.0], [8.1, 2270.0], [8.2, 2271.0], [8.3, 2271.0], [8.4, 2271.0], [8.5, 2271.0], [8.6, 2271.0], [8.7, 2272.0], [8.8, 2272.0], [8.9, 2272.0], [9.0, 2273.0], [9.1, 2273.0], [9.2, 2273.0], [9.3, 2274.0], [9.4, 2274.0], [9.5, 2274.0], [9.6, 2274.0], [9.7, 2274.0], [9.8, 2275.0], [9.9, 2275.0], [10.0, 2275.0], [10.1, 2276.0], [10.2, 2276.0], [10.3, 2276.0], [10.4, 2276.0], [10.5, 2277.0], [10.6, 2277.0], [10.7, 2277.0], [10.8, 2278.0], [10.9, 2278.0], [11.0, 2279.0], [11.1, 2279.0], [11.2, 2279.0], [11.3, 2279.0], [11.4, 2280.0], [11.5, 2280.0], [11.6, 2281.0], [11.7, 2281.0], [11.8, 2281.0], [11.9, 2281.0], [12.0, 2282.0], [12.1, 2282.0], [12.2, 2282.0], [12.3, 2283.0], [12.4, 2283.0], [12.5, 2283.0], [12.6, 2284.0], [12.7, 2284.0], [12.8, 2284.0], [12.9, 2285.0], [13.0, 2285.0], [13.1, 2285.0], [13.2, 2286.0], [13.3, 2286.0], [13.4, 2286.0], [13.5, 2286.0], [13.6, 2286.0], [13.7, 2287.0], [13.8, 2287.0], [13.9, 2287.0], [14.0, 2288.0], [14.1, 2288.0], [14.2, 2288.0], [14.3, 2289.0], [14.4, 2289.0], [14.5, 2289.0], [14.6, 2289.0], [14.7, 2290.0], [14.8, 2290.0], [14.9, 2291.0], [15.0, 2291.0], [15.1, 2291.0], [15.2, 2291.0], [15.3, 2292.0], [15.4, 2292.0], [15.5, 2293.0], [15.6, 2293.0], [15.7, 2293.0], [15.8, 2293.0], [15.9, 2293.0], [16.0, 2294.0], [16.1, 2294.0], [16.2, 2294.0], [16.3, 2294.0], [16.4, 2295.0], [16.5, 2295.0], [16.6, 2295.0], [16.7, 2295.0], [16.8, 2295.0], [16.9, 2296.0], [17.0, 2296.0], [17.1, 2296.0], [17.2, 2296.0], [17.3, 2297.0], [17.4, 2297.0], [17.5, 2298.0], [17.6, 2299.0], [17.7, 2300.0], [17.8, 2300.0], [17.9, 2300.0], [18.0, 2301.0], [18.1, 2302.0], [18.2, 2302.0], [18.3, 2302.0], [18.4, 2303.0], [18.5, 2303.0], [18.6, 2305.0], [18.7, 2306.0], [18.8, 2307.0], [18.9, 2307.0], [19.0, 2307.0], [19.1, 2307.0], [19.2, 2307.0], [19.3, 2308.0], [19.4, 2308.0], [19.5, 2308.0], [19.6, 2309.0], [19.7, 2309.0], [19.8, 2310.0], [19.9, 2310.0], [20.0, 2310.0], [20.1, 2311.0], [20.2, 2311.0], [20.3, 2311.0], [20.4, 2311.0], [20.5, 2312.0], [20.6, 2312.0], [20.7, 2312.0], [20.8, 2312.0], [20.9, 2313.0], [21.0, 2313.0], [21.1, 2313.0], [21.2, 2314.0], [21.3, 2314.0], [21.4, 2315.0], [21.5, 2315.0], [21.6, 2316.0], [21.7, 2316.0], [21.8, 2316.0], [21.9, 2317.0], [22.0, 2317.0], [22.1, 2318.0], [22.2, 2318.0], [22.3, 2319.0], [22.4, 2319.0], [22.5, 2320.0], [22.6, 2320.0], [22.7, 2321.0], [22.8, 2321.0], [22.9, 2322.0], [23.0, 2322.0], [23.1, 2323.0], [23.2, 2323.0], [23.3, 2324.0], [23.4, 2324.0], [23.5, 2324.0], [23.6, 2325.0], [23.7, 2325.0], [23.8, 2326.0], [23.9, 2326.0], [24.0, 2327.0], [24.1, 2327.0], [24.2, 2327.0], [24.3, 2327.0], [24.4, 2328.0], [24.5, 2328.0], [24.6, 2328.0], [24.7, 2329.0], [24.8, 2329.0], [24.9, 2331.0], [25.0, 2331.0], [25.1, 2331.0], [25.2, 2331.0], [25.3, 2332.0], [25.4, 2332.0], [25.5, 2333.0], [25.6, 2333.0], [25.7, 2334.0], [25.8, 2334.0], [25.9, 2335.0], [26.0, 2336.0], [26.1, 2336.0], [26.2, 2337.0], [26.3, 2337.0], [26.4, 2338.0], [26.5, 2339.0], [26.6, 2340.0], [26.7, 2341.0], [26.8, 2341.0], [26.9, 2341.0], [27.0, 2342.0], [27.1, 2343.0], [27.2, 2344.0], [27.3, 2345.0], [27.4, 2345.0], [27.5, 2346.0], [27.6, 2347.0], [27.7, 2348.0], [27.8, 2349.0], [27.9, 2349.0], [28.0, 2350.0], [28.1, 2351.0], [28.2, 2351.0], [28.3, 2352.0], [28.4, 2353.0], [28.5, 2354.0], [28.6, 2355.0], [28.7, 2356.0], [28.8, 2356.0], [28.9, 2357.0], [29.0, 2357.0], [29.1, 2357.0], [29.2, 2358.0], [29.3, 2359.0], [29.4, 2359.0], [29.5, 2360.0], [29.6, 2361.0], [29.7, 2362.0], [29.8, 2362.0], [29.9, 2363.0], [30.0, 2363.0], [30.1, 2363.0], [30.2, 2364.0], [30.3, 2365.0], [30.4, 2365.0], [30.5, 2366.0], [30.6, 2367.0], [30.7, 2367.0], [30.8, 2368.0], [30.9, 2369.0], [31.0, 2369.0], [31.1, 2369.0], [31.2, 2370.0], [31.3, 2371.0], [31.4, 2372.0], [31.5, 2372.0], [31.6, 2373.0], [31.7, 2374.0], [31.8, 2374.0], [31.9, 2375.0], [32.0, 2375.0], [32.1, 2376.0], [32.2, 2377.0], [32.3, 2378.0], [32.4, 2379.0], [32.5, 2380.0], [32.6, 2380.0], [32.7, 2380.0], [32.8, 2381.0], [32.9, 2381.0], [33.0, 2383.0], [33.1, 2383.0], [33.2, 2383.0], [33.3, 2384.0], [33.4, 2385.0], [33.5, 2385.0], [33.6, 2386.0], [33.7, 2387.0], [33.8, 2388.0], [33.9, 2388.0], [34.0, 2388.0], [34.1, 2389.0], [34.2, 2390.0], [34.3, 2391.0], [34.4, 2391.0], [34.5, 2392.0], [34.6, 2393.0], [34.7, 2394.0], [34.8, 2394.0], [34.9, 2397.0], [35.0, 2397.0], [35.1, 2398.0], [35.2, 2399.0], [35.3, 2400.0], [35.4, 2401.0], [35.5, 2402.0], [35.6, 2403.0], [35.7, 2403.0], [35.8, 2404.0], [35.9, 2405.0], [36.0, 2406.0], [36.1, 2407.0], [36.2, 2408.0], [36.3, 2409.0], [36.4, 2409.0], [36.5, 2409.0], [36.6, 2410.0], [36.7, 2410.0], [36.8, 2411.0], [36.9, 2411.0], [37.0, 2412.0], [37.1, 2413.0], [37.2, 2413.0], [37.3, 2414.0], [37.4, 2417.0], [37.5, 2419.0], [37.6, 2420.0], [37.7, 2422.0], [37.8, 2422.0], [37.9, 2424.0], [38.0, 2425.0], [38.1, 2427.0], [38.2, 2427.0], [38.3, 2429.0], [38.4, 2430.0], [38.5, 2430.0], [38.6, 2433.0], [38.7, 2434.0], [38.8, 2436.0], [38.9, 2437.0], [39.0, 2438.0], [39.1, 2440.0], [39.2, 2444.0], [39.3, 2445.0], [39.4, 2446.0], [39.5, 2447.0], [39.6, 2449.0], [39.7, 2450.0], [39.8, 2450.0], [39.9, 2451.0], [40.0, 2453.0], [40.1, 2457.0], [40.2, 2457.0], [40.3, 2458.0], [40.4, 2458.0], [40.5, 2459.0], [40.6, 2460.0], [40.7, 2463.0], [40.8, 2466.0], [40.9, 2467.0], [41.0, 2468.0], [41.1, 2469.0], [41.2, 2471.0], [41.3, 2472.0], [41.4, 2474.0], [41.5, 2475.0], [41.6, 2476.0], [41.7, 2479.0], [41.8, 2480.0], [41.9, 2481.0], [42.0, 2481.0], [42.1, 2484.0], [42.2, 2486.0], [42.3, 2487.0], [42.4, 2490.0], [42.5, 2492.0], [42.6, 2494.0], [42.7, 2497.0], [42.8, 2499.0], [42.9, 2500.0], [43.0, 2503.0], [43.1, 2504.0], [43.2, 2506.0], [43.3, 2510.0], [43.4, 2510.0], [43.5, 2512.0], [43.6, 2516.0], [43.7, 2518.0], [43.8, 2520.0], [43.9, 2521.0], [44.0, 2523.0], [44.1, 2527.0], [44.2, 2527.0], [44.3, 2533.0], [44.4, 2536.0], [44.5, 2541.0], [44.6, 2545.0], [44.7, 2547.0], [44.8, 2550.0], [44.9, 2565.0], [45.0, 2567.0], [45.1, 2571.0], [45.2, 2575.0], [45.3, 2586.0], [45.4, 2589.0], [45.5, 2598.0], [45.6, 2605.0], [45.7, 2616.0], [45.8, 2621.0], [45.9, 2631.0], [46.0, 2642.0], [46.1, 2650.0], [46.2, 2667.0], [46.3, 2674.0], [46.4, 2699.0], [46.5, 2720.0], [46.6, 2731.0], [46.7, 2782.0], [46.8, 2800.0], [46.9, 2831.0], [47.0, 2897.0], [47.1, 2926.0], [47.2, 2964.0], [47.3, 3046.0], [47.4, 3144.0], [47.5, 3164.0], [47.6, 3248.0], [47.7, 3348.0], [47.8, 3488.0], [47.9, 3557.0], [48.0, 3619.0], [48.1, 3687.0], [48.2, 3770.0], [48.3, 3979.0], [48.4, 4078.0], [48.5, 5422.0], [48.6, 8266.0], [48.7, 10721.0], [48.8, 14348.0], [48.9, 14706.0], [49.0, 15594.0], [49.1, 16684.0], [49.2, 17449.0], [49.3, 18355.0], [49.4, 19850.0], [49.5, 20333.0], [49.6, 20623.0], [49.7, 21488.0], [49.8, 21962.0], [49.9, 22069.0], [50.0, 22325.0], [50.1, 22790.0], [50.2, 23036.0], [50.3, 23336.0], [50.4, 23514.0], [50.5, 23638.0], [50.6, 24246.0], [50.7, 24757.0], [50.8, 24932.0], [50.9, 25085.0], [51.0, 25360.0], [51.1, 26080.0], [51.2, 26316.0], [51.3, 26582.0], [51.4, 26781.0], [51.5, 27052.0], [51.6, 27292.0], [51.7, 27499.0], [51.8, 27849.0], [51.9, 28701.0], [52.0, 29165.0], [52.1, 29489.0], [52.2, 30045.0], [52.3, 30899.0], [52.4, 31269.0], [52.5, 32237.0], [52.6, 32940.0], [52.7, 33922.0], [52.8, 34140.0], [52.9, 34305.0], [53.0, 34550.0], [53.1, 34663.0], [53.2, 34891.0], [53.3, 35044.0], [53.4, 35171.0], [53.5, 35357.0], [53.6, 35607.0], [53.7, 36263.0], [53.8, 36463.0], [53.9, 36868.0], [54.0, 37256.0], [54.1, 37630.0], [54.2, 37946.0], [54.3, 38319.0], [54.4, 38466.0], [54.5, 38663.0], [54.6, 39538.0], [54.7, 39939.0], [54.8, 39985.0], [54.9, 40680.0], [55.0, 40843.0], [55.1, 41193.0], [55.2, 41289.0], [55.3, 41310.0], [55.4, 41431.0], [55.5, 41544.0], [55.6, 41601.0], [55.7, 41770.0], [55.8, 41878.0], [55.9, 42045.0], [56.0, 42292.0], [56.1, 42380.0], [56.2, 42570.0], [56.3, 42615.0], [56.4, 42743.0], [56.5, 42932.0], [56.6, 43103.0], [56.7, 43576.0], [56.8, 43872.0], [56.9, 43931.0], [57.0, 44202.0], [57.1, 44699.0], [57.2, 45372.0], [57.3, 45435.0], [57.4, 46156.0], [57.5, 46711.0], [57.6, 47035.0], [57.7, 47136.0], [57.8, 47260.0], [57.9, 47328.0], [58.0, 47505.0], [58.1, 47735.0], [58.2, 47899.0], [58.3, 47937.0], [58.4, 47986.0], [58.5, 48049.0], [58.6, 48182.0], [58.7, 48298.0], [58.8, 48347.0], [58.9, 48447.0], [59.0, 48541.0], [59.1, 48688.0], [59.2, 48721.0], [59.3, 48855.0], [59.4, 48896.0], [59.5, 48958.0], [59.6, 49011.0], [59.7, 49146.0], [59.8, 49224.0], [59.9, 49279.0], [60.0, 49344.0], [60.1, 49440.0], [60.2, 49473.0], [60.3, 49583.0], [60.4, 49680.0], [60.5, 49745.0], [60.6, 49816.0], [60.7, 49859.0], [60.8, 49917.0], [60.9, 50034.0], [61.0, 50100.0], [61.1, 50117.0], [61.2, 50157.0], [61.3, 50257.0], [61.4, 50276.0], [61.5, 50292.0], [61.6, 50326.0], [61.7, 50364.0], [61.8, 50393.0], [61.9, 50407.0], [62.0, 50457.0], [62.1, 50509.0], [62.2, 50542.0], [62.3, 50555.0], [62.4, 50588.0], [62.5, 50606.0], [62.6, 50629.0], [62.7, 50697.0], [62.8, 50752.0], [62.9, 50819.0], [63.0, 50887.0], [63.1, 50917.0], [63.2, 50932.0], [63.3, 50979.0], [63.4, 51025.0], [63.5, 51111.0], [63.6, 51178.0], [63.7, 51201.0], [63.8, 51248.0], [63.9, 51336.0], [64.0, 51347.0], [64.1, 51406.0], [64.2, 51418.0], [64.3, 51464.0], [64.4, 51471.0], [64.5, 51493.0], [64.6, 51534.0], [64.7, 51556.0], [64.8, 51575.0], [64.9, 51613.0], [65.0, 51618.0], [65.1, 51646.0], [65.2, 51679.0], [65.3, 51710.0], [65.4, 51744.0], [65.5, 51794.0], [65.6, 51803.0], [65.7, 51841.0], [65.8, 51872.0], [65.9, 51898.0], [66.0, 51926.0], [66.1, 51940.0], [66.2, 51951.0], [66.3, 51971.0], [66.4, 52018.0], [66.5, 52054.0], [66.6, 52072.0], [66.7, 52101.0], [66.8, 52119.0], [66.9, 52148.0], [67.0, 52171.0], [67.1, 52209.0], [67.2, 52229.0], [67.3, 52267.0], [67.4, 52272.0], [67.5, 52281.0], [67.6, 52320.0], [67.7, 52339.0], [67.8, 52364.0], [67.9, 52420.0], [68.0, 52431.0], [68.1, 52457.0], [68.2, 52498.0], [68.3, 52538.0], [68.4, 52560.0], [68.5, 52574.0], [68.6, 52594.0], [68.7, 52617.0], [68.8, 52629.0], [68.9, 52664.0], [69.0, 52706.0], [69.1, 52745.0], [69.2, 52792.0], [69.3, 52823.0], [69.4, 52848.0], [69.5, 52887.0], [69.6, 52929.0], [69.7, 52950.0], [69.8, 52968.0], [69.9, 53010.0], [70.0, 53041.0], [70.1, 53069.0], [70.2, 53087.0], [70.3, 53130.0], [70.4, 53168.0], [70.5, 53185.0], [70.6, 53231.0], [70.7, 53239.0], [70.8, 53242.0], [70.9, 53273.0], [71.0, 53287.0], [71.1, 53325.0], [71.2, 53336.0], [71.3, 53346.0], [71.4, 53359.0], [71.5, 53404.0], [71.6, 53424.0], [71.7, 53469.0], [71.8, 53478.0], [71.9, 53518.0], [72.0, 53538.0], [72.1, 53551.0], [72.2, 53565.0], [72.3, 53619.0], [72.4, 53633.0], [72.5, 53639.0], [72.6, 53669.0], [72.7, 53686.0], [72.8, 53718.0], [72.9, 53742.0], [73.0, 53774.0], [73.1, 53786.0], [73.2, 53817.0], [73.3, 53834.0], [73.4, 53860.0], [73.5, 53885.0], [73.6, 53928.0], [73.7, 53951.0], [73.8, 53966.0], [73.9, 54003.0], [74.0, 54013.0], [74.1, 54015.0], [74.2, 54029.0], [74.3, 54045.0], [74.4, 54068.0], [74.5, 54078.0], [74.6, 54093.0], [74.7, 54148.0], [74.8, 54160.0], [74.9, 54190.0], [75.0, 54198.0], [75.1, 54214.0], [75.2, 54240.0], [75.3, 54260.0], [75.4, 54280.0], [75.5, 54294.0], [75.6, 54303.0], [75.7, 54316.0], [75.8, 54336.0], [75.9, 54348.0], [76.0, 54366.0], [76.1, 54370.0], [76.2, 54386.0], [76.3, 54393.0], [76.4, 54403.0], [76.5, 54415.0], [76.6, 54433.0], [76.7, 54475.0], [76.8, 54516.0], [76.9, 54532.0], [77.0, 54565.0], [77.1, 54569.0], [77.2, 54592.0], [77.3, 54630.0], [77.4, 54639.0], [77.5, 54675.0], [77.6, 54721.0], [77.7, 54732.0], [77.8, 54751.0], [77.9, 54780.0], [78.0, 54803.0], [78.1, 54829.0], [78.2, 54860.0], [78.3, 54915.0], [78.4, 54935.0], [78.5, 54943.0], [78.6, 54962.0], [78.7, 54988.0], [78.8, 54995.0], [78.9, 55030.0], [79.0, 55034.0], [79.1, 55046.0], [79.2, 55055.0], [79.3, 55096.0], [79.4, 55113.0], [79.5, 55142.0], [79.6, 55199.0], [79.7, 55211.0], [79.8, 55234.0], [79.9, 55251.0], [80.0, 55281.0], [80.1, 55304.0], [80.2, 55325.0], [80.3, 55348.0], [80.4, 55366.0], [80.5, 55403.0], [80.6, 55452.0], [80.7, 55463.0], [80.8, 55476.0], [80.9, 55499.0], [81.0, 55521.0], [81.1, 55537.0], [81.2, 55563.0], [81.3, 55597.0], [81.4, 55616.0], [81.5, 55653.0], [81.6, 55661.0], [81.7, 55665.0], [81.8, 55688.0], [81.9, 55704.0], [82.0, 55748.0], [82.1, 55767.0], [82.2, 55794.0], [82.3, 55814.0], [82.4, 55831.0], [82.5, 55846.0], [82.6, 55856.0], [82.7, 55866.0], [82.8, 55888.0], [82.9, 55916.0], [83.0, 55927.0], [83.1, 55937.0], [83.2, 55946.0], [83.3, 55973.0], [83.4, 56024.0], [83.5, 56046.0], [83.6, 56068.0], [83.7, 56121.0], [83.8, 56132.0], [83.9, 56150.0], [84.0, 56154.0], [84.1, 56182.0], [84.2, 56203.0], [84.3, 56206.0], [84.4, 56220.0], [84.5, 56229.0], [84.6, 56270.0], [84.7, 56285.0], [84.8, 56319.0], [84.9, 56398.0], [85.0, 56416.0], [85.1, 56435.0], [85.2, 56474.0], [85.3, 56498.0], [85.4, 56538.0], [85.5, 56614.0], [85.6, 56632.0], [85.7, 56696.0], [85.8, 56728.0], [85.9, 56748.0], [86.0, 56775.0], [86.1, 56821.0], [86.2, 56856.0], [86.3, 56866.0], [86.4, 56891.0], [86.5, 56932.0], [86.6, 56964.0], [86.7, 56990.0], [86.8, 57006.0], [86.9, 57038.0], [87.0, 57053.0], [87.1, 57060.0], [87.2, 57077.0], [87.3, 57126.0], [87.4, 57157.0], [87.5, 57228.0], [87.6, 57274.0], [87.7, 57293.0], [87.8, 57311.0], [87.9, 57351.0], [88.0, 57397.0], [88.1, 57428.0], [88.2, 57449.0], [88.3, 57486.0], [88.4, 57526.0], [88.5, 57550.0], [88.6, 57575.0], [88.7, 57628.0], [88.8, 57648.0], [88.9, 57681.0], [89.0, 57703.0], [89.1, 57718.0], [89.2, 57743.0], [89.3, 57833.0], [89.4, 57867.0], [89.5, 57905.0], [89.6, 57949.0], [89.7, 57986.0], [89.8, 57994.0], [89.9, 58008.0], [90.0, 58039.0], [90.1, 58104.0], [90.2, 58127.0], [90.3, 58169.0], [90.4, 58206.0], [90.5, 58218.0], [90.6, 58258.0], [90.7, 58333.0], [90.8, 58348.0], [90.9, 58360.0], [91.0, 58371.0], [91.1, 58427.0], [91.2, 58437.0], [91.3, 58453.0], [91.4, 58470.0], [91.5, 58538.0], [91.6, 58576.0], [91.7, 58583.0], [91.8, 58629.0], [91.9, 58646.0], [92.0, 58690.0], [92.1, 58702.0], [92.2, 58737.0], [92.3, 58772.0], [92.4, 58801.0], [92.5, 58816.0], [92.6, 58837.0], [92.7, 58865.0], [92.8, 58876.0], [92.9, 58891.0], [93.0, 58930.0], [93.1, 58984.0], [93.2, 59015.0], [93.3, 59028.0], [93.4, 59043.0], [93.5, 59113.0], [93.6, 59153.0], [93.7, 59201.0], [93.8, 59219.0], [93.9, 59245.0], [94.0, 59271.0], [94.1, 59309.0], [94.2, 59328.0], [94.3, 59337.0], [94.4, 59398.0], [94.5, 59422.0], [94.6, 59455.0], [94.7, 59480.0], [94.8, 59496.0], [94.9, 59584.0], [95.0, 59625.0], [95.1, 59700.0], [95.2, 59764.0], [95.3, 59815.0], [95.4, 59843.0], [95.5, 59873.0], [95.6, 59993.0], [95.7, 60018.0], [95.8, 60093.0], [95.9, 60126.0], [96.0, 60168.0], [96.1, 60278.0], [96.2, 60320.0], [96.3, 60375.0], [96.4, 60421.0], [96.5, 60429.0], [96.6, 60516.0], [96.7, 60580.0], [96.8, 60585.0], [96.9, 60623.0], [97.0, 60663.0], [97.1, 60841.0], [97.2, 60862.0], [97.3, 60971.0], [97.4, 61072.0], [97.5, 61107.0], [97.6, 61152.0], [97.7, 61258.0], [97.8, 61398.0], [97.9, 61465.0], [98.0, 61579.0], [98.1, 61682.0], [98.2, 61842.0], [98.3, 61951.0], [98.4, 62192.0], [98.5, 62283.0], [98.6, 62393.0], [98.7, 62527.0], [98.8, 62629.0], [98.9, 62780.0], [99.0, 63092.0], [99.1, 63653.0], [99.2, 63778.0], [99.3, 63992.0], [99.4, 64178.0], [99.5, 64337.0], [99.6, 64452.0], [99.7, 65078.0], [99.8, 65872.0], [99.9, 67517.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 529.0, "series": [{"data": [[67500.0, 1.0], [65900.0, 1.0], [68300.0, 1.0], [32900.0, 1.0], [34500.0, 2.0], [34100.0, 2.0], [34900.0, 2.0], [35300.0, 1.0], [35700.0, 1.0], [38500.0, 2.0], [38100.0, 2.0], [37700.0, 1.0], [36900.0, 1.0], [40500.0, 1.0], [40900.0, 1.0], [41300.0, 4.0], [41700.0, 2.0], [42500.0, 2.0], [42900.0, 3.0], [43300.0, 2.0], [44100.0, 2.0], [45300.0, 2.0], [45700.0, 1.0], [46100.0, 1.0], [48500.0, 3.0], [48100.0, 2.0], [48900.0, 5.0], [47700.0, 1.0], [47300.0, 2.0], [50500.0, 12.0], [50900.0, 9.0], [49700.0, 3.0], [50100.0, 8.0], [49300.0, 2.0], [51700.0, 10.0], [51300.0, 6.0], [52100.0, 12.0], [52500.0, 12.0], [52900.0, 10.0], [53300.0, 13.0], [54500.0, 13.0], [53700.0, 11.0], [54100.0, 12.0], [54900.0, 16.0], [55700.0, 12.0], [56100.0, 15.0], [56900.0, 8.0], [55300.0, 12.0], [56500.0, 4.0], [57300.0, 9.0], [58500.0, 10.0], [58900.0, 8.0], [57700.0, 8.0], [59300.0, 10.0], [58100.0, 10.0], [59700.0, 6.0], [61300.0, 3.0], [60100.0, 6.0], [60500.0, 8.0], [60900.0, 3.0], [62100.0, 5.0], [62900.0, 2.0], [62500.0, 3.0], [63300.0, 1.0], [64100.0, 3.0], [63700.0, 2.0], [64500.0, 1.0], [65800.0, 1.0], [1700.0, 1.0], [2200.0, 529.0], [2300.0, 526.0], [2400.0, 230.0], [2500.0, 79.0], [2600.0, 27.0], [2800.0, 7.0], [2700.0, 11.0], [2900.0, 7.0], [3000.0, 4.0], [3100.0, 4.0], [3300.0, 4.0], [3200.0, 3.0], [3400.0, 3.0], [3500.0, 5.0], [3700.0, 2.0], [3600.0, 5.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 1.0], [4300.0, 1.0], [74500.0, 1.0], [5400.0, 1.0], [6200.0, 2.0], [8200.0, 1.0], [9300.0, 1.0], [10700.0, 1.0], [10600.0, 1.0], [13400.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [14700.0, 1.0], [14600.0, 2.0], [15000.0, 1.0], [15100.0, 1.0], [15500.0, 1.0], [15900.0, 2.0], [17400.0, 2.0], [16600.0, 1.0], [18000.0, 1.0], [19800.0, 2.0], [20400.0, 1.0], [20600.0, 1.0], [21400.0, 1.0], [21000.0, 1.0], [22000.0, 3.0], [21800.0, 2.0], [22200.0, 1.0], [23400.0, 2.0], [23000.0, 1.0], [23600.0, 2.0], [24200.0, 1.0], [24000.0, 1.0], [25000.0, 3.0], [24800.0, 1.0], [25200.0, 1.0], [25800.0, 1.0], [26200.0, 1.0], [26000.0, 1.0], [26600.0, 2.0], [26400.0, 1.0], [27200.0, 2.0], [26800.0, 1.0], [27000.0, 2.0], [27400.0, 3.0], [27600.0, 1.0], [27800.0, 2.0], [28600.0, 1.0], [28800.0, 1.0], [29000.0, 1.0], [29400.0, 3.0], [29200.0, 1.0], [29800.0, 1.0], [30000.0, 1.0], [30800.0, 2.0], [31000.0, 1.0], [31200.0, 1.0], [31400.0, 1.0], [32200.0, 1.0], [34800.0, 1.0], [34400.0, 1.0], [36800.0, 2.0], [35200.0, 2.0], [35600.0, 1.0], [36400.0, 1.0], [37200.0, 1.0], [37600.0, 1.0], [38800.0, 1.0], [38400.0, 2.0], [39600.0, 1.0], [39200.0, 1.0], [40800.0, 2.0], [41200.0, 3.0], [41600.0, 2.0], [42000.0, 1.0], [42400.0, 1.0], [43600.0, 1.0], [44800.0, 1.0], [46400.0, 1.0], [46800.0, 1.0], [47200.0, 3.0], [48800.0, 6.0], [48000.0, 4.0], [48400.0, 3.0], [47600.0, 1.0], [49200.0, 6.0], [50800.0, 6.0], [49600.0, 3.0], [50400.0, 6.0], [50000.0, 3.0], [52400.0, 11.0], [52800.0, 10.0], [53200.0, 15.0], [51600.0, 11.0], [51200.0, 8.0], [52000.0, 11.0], [54000.0, 22.0], [55200.0, 14.0], [53600.0, 15.0], [54800.0, 9.0], [54400.0, 12.0], [55600.0, 15.0], [57200.0, 9.0], [56800.0, 12.0], [56400.0, 13.0], [56000.0, 10.0], [58400.0, 12.0], [58800.0, 16.0], [59200.0, 12.0], [57600.0, 9.0], [58000.0, 6.0], [59600.0, 4.0], [60000.0, 6.0], [60800.0, 6.0], [60400.0, 7.0], [61200.0, 2.0], [61600.0, 4.0], [62400.0, 1.0], [63600.0, 2.0], [64400.0, 2.0], [64000.0, 1.0], [64800.0, 1.0], [65600.0, 1.0], [33100.0, 1.0], [33900.0, 3.0], [34700.0, 2.0], [34300.0, 1.0], [36300.0, 2.0], [35100.0, 1.0], [37500.0, 1.0], [37900.0, 2.0], [37100.0, 1.0], [38300.0, 2.0], [39900.0, 4.0], [40700.0, 2.0], [39500.0, 2.0], [41100.0, 1.0], [42300.0, 4.0], [41500.0, 4.0], [42700.0, 2.0], [41900.0, 2.0], [43100.0, 1.0], [43500.0, 1.0], [43900.0, 2.0], [47100.0, 3.0], [46700.0, 1.0], [47500.0, 2.0], [48700.0, 3.0], [49100.0, 3.0], [47900.0, 6.0], [48300.0, 3.0], [50300.0, 8.0], [51100.0, 4.0], [49500.0, 4.0], [50700.0, 4.0], [49900.0, 4.0], [51500.0, 11.0], [53100.0, 10.0], [52700.0, 9.0], [51900.0, 11.0], [52300.0, 10.0], [54300.0, 25.0], [53500.0, 14.0], [55100.0, 8.0], [54700.0, 14.0], [53900.0, 11.0], [55500.0, 13.0], [55900.0, 15.0], [56300.0, 6.0], [56700.0, 9.0], [57100.0, 5.0], [58300.0, 10.0], [58700.0, 9.0], [59100.0, 6.0], [57500.0, 11.0], [57900.0, 11.0], [59900.0, 3.0], [60300.0, 5.0], [59500.0, 3.0], [61100.0, 7.0], [60700.0, 1.0], [62300.0, 2.0], [61500.0, 2.0], [62700.0, 2.0], [61900.0, 2.0], [64300.0, 2.0], [63900.0, 1.0], [63500.0, 1.0], [17100.0, 1.0], [16900.0, 1.0], [18300.0, 1.0], [19300.0, 1.0], [20100.0, 2.0], [20300.0, 2.0], [20700.0, 1.0], [21900.0, 1.0], [22100.0, 1.0], [22300.0, 1.0], [22500.0, 1.0], [22700.0, 2.0], [22900.0, 2.0], [23100.0, 1.0], [23300.0, 2.0], [23500.0, 2.0], [24500.0, 1.0], [23700.0, 1.0], [24700.0, 3.0], [25300.0, 3.0], [24900.0, 1.0], [26500.0, 2.0], [26300.0, 1.0], [26100.0, 1.0], [26700.0, 2.0], [28500.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [30500.0, 1.0], [30900.0, 1.0], [31700.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [33400.0, 1.0], [34600.0, 3.0], [34200.0, 1.0], [36600.0, 1.0], [35000.0, 3.0], [35400.0, 2.0], [36200.0, 1.0], [35800.0, 1.0], [37400.0, 1.0], [38600.0, 1.0], [40600.0, 2.0], [42600.0, 4.0], [41800.0, 3.0], [42200.0, 3.0], [41400.0, 3.0], [43000.0, 1.0], [43800.0, 3.0], [44600.0, 3.0], [44200.0, 1.0], [45400.0, 4.0], [47000.0, 3.0], [46600.0, 1.0], [47800.0, 3.0], [48600.0, 3.0], [49000.0, 2.0], [48200.0, 3.0], [47400.0, 2.0], [50200.0, 10.0], [50600.0, 8.0], [51000.0, 4.0], [49400.0, 6.0], [49800.0, 6.0], [53000.0, 10.0], [51800.0, 11.0], [52200.0, 13.0], [51400.0, 13.0], [52600.0, 9.0], [53400.0, 10.0], [55000.0, 16.0], [53800.0, 11.0], [54200.0, 16.0], [54600.0, 9.0], [55800.0, 18.0], [57000.0, 17.0], [56200.0, 16.0], [55400.0, 13.0], [56600.0, 8.0], [57400.0, 8.0], [57800.0, 7.0], [59000.0, 9.0], [58600.0, 10.0], [58200.0, 9.0], [59800.0, 7.0], [60600.0, 5.0], [59400.0, 13.0], [60200.0, 5.0], [61400.0, 4.0], [61000.0, 2.0], [62200.0, 2.0], [62600.0, 3.0], [63000.0, 1.0], [61800.0, 3.0], [63800.0, 2.0], [64200.0, 1.0], [65000.0, 1.0], [65400.0, 1.0], [66800.0, 1.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 74500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1459.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1541.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1541.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1459.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 165.32378223495698, "minX": 1.69693176E12, "maxY": 266.40923566878996, "series": [{"data": [[1.69693176E12, 246.2867647058823], [1.69693194E12, 263.47368421052585], [1.69693182E12, 264.68421052631567], [1.696932E12, 265.0945945945946], [1.69693188E12, 266.40923566878996], [1.69693206E12, 165.32378223495698]], "isOverall": false, "label": "Performance Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69693206E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2383.0, "minX": 1.0, "maxY": 70003.0, "series": [{"data": [[2.0, 50084.0], [3.0, 50457.0], [4.0, 51036.0], [5.0, 49917.0], [6.0, 50887.0], [7.0, 49627.0], [8.0, 50109.0], [9.0, 50112.0], [10.0, 50778.0], [11.0, 50663.0], [12.0, 49439.0], [13.0, 50118.0], [14.0, 49898.0], [15.0, 50372.0], [16.0, 58865.0], [17.0, 58206.0], [18.0, 25690.0], [19.0, 58460.0], [20.0, 58838.0], [21.0, 58216.0], [22.0, 57994.0], [23.0, 48972.0], [24.0, 59152.0], [25.0, 59422.0], [26.0, 50094.0], [27.0, 59163.0], [28.0, 59015.0], [29.0, 58690.0], [30.0, 59271.0], [31.0, 58538.0], [33.0, 59088.0], [32.0, 58012.0], [34.0, 31293.5], [35.0, 57743.0], [37.0, 59354.0], [36.0, 60490.0], [39.0, 60886.0], [38.0, 57920.0], [41.0, 58827.0], [40.0, 58763.0], [43.0, 58624.0], [42.0, 59481.0], [45.0, 59335.0], [44.0, 60421.0], [47.0, 58356.0], [46.0, 59625.0], [49.0, 58351.0], [48.0, 60420.0], [51.0, 60425.0], [50.0, 59843.0], [53.0, 58440.0], [52.0, 60004.0], [55.0, 32135.0], [54.0, 57906.0], [57.0, 59993.0], [56.0, 59860.0], [59.0, 59215.0], [58.0, 58642.0], [61.0, 59025.0], [60.0, 58087.0], [63.0, 57397.0], [62.0, 58185.0], [67.0, 56899.0], [66.0, 56068.0], [65.0, 64864.0], [64.0, 59073.0], [71.0, 62629.0], [70.0, 64021.0], [69.0, 55751.0], [68.0, 63778.0], [75.0, 61682.0], [74.0, 62192.0], [73.0, 62193.0], [72.0, 62100.0], [79.0, 61951.0], [78.0, 63538.0], [77.0, 61842.0], [76.0, 61877.0], [83.0, 59414.0], [82.0, 60429.0], [81.0, 61950.0], [80.0, 60570.0], [87.0, 59560.0], [86.0, 59210.0], [85.0, 60913.0], [84.0, 60168.0], [91.0, 61045.0], [90.0, 61345.0], [89.0, 59608.0], [88.0, 60431.0], [95.0, 61107.0], [94.0, 58583.0], [93.0, 60583.0], [92.0, 59219.0], [99.0, 60733.0], [98.0, 58361.0], [97.0, 60980.0], [96.0, 60580.0], [103.0, 58799.0], [102.0, 56765.0], [101.0, 60585.0], [100.0, 60205.0], [107.0, 68373.0], [106.0, 58104.0], [105.0, 57648.0], [104.0, 59870.0], [111.0, 58427.0], [110.0, 59028.0], [109.0, 58433.0], [108.0, 59764.0], [115.0, 65950.0], [114.0, 56165.0], [113.0, 55499.0], [112.0, 57003.0], [118.0, 65694.0], [117.0, 56489.0], [116.0, 55414.0], [123.0, 64559.0], [122.0, 65078.0], [121.0, 65872.0], [120.0, 70003.0], [127.0, 37586.5], [126.0, 64272.0], [125.0, 64358.0], [124.0, 64178.0], [135.0, 63992.0], [134.0, 63714.0], [133.0, 63697.0], [132.0, 64404.0], [131.0, 64114.0], [130.0, 63653.0], [129.0, 63826.0], [128.0, 63335.0], [141.0, 38333.0], [143.0, 61484.0], [142.0, 62763.0], [140.0, 62676.0], [139.0, 64199.0], [138.0, 61825.0], [137.0, 62283.0], [136.0, 62780.0], [148.0, 30399.333333333336], [151.0, 62319.0], [150.0, 62514.0], [149.0, 61152.0], [147.0, 61619.0], [146.0, 61579.0], [145.0, 61642.0], [144.0, 61163.0], [154.0, 29959.333333333336], [153.0, 30688.333333333336], [152.0, 37257.5], [158.0, 37713.0], [159.0, 60278.0], [157.0, 61258.0], [156.0, 59794.0], [155.0, 61519.0], [160.0, 39279.5], [165.0, 38103.0], [167.0, 30706.666666666664], [166.0, 61106.0], [164.0, 61464.0], [163.0, 58867.0], [162.0, 62393.0], [161.0, 60379.0], [172.0, 38296.0], [174.0, 38639.5], [175.0, 37825.5], [173.0, 60516.0], [171.0, 59426.0], [170.0, 60154.0], [169.0, 58360.0], [168.0, 60538.0], [176.0, 37413.0], [183.0, 67517.0], [182.0, 57449.0], [181.0, 56270.0], [180.0, 58698.0], [179.0, 57050.0], [178.0, 58371.0], [177.0, 59491.0], [187.0, 37120.0], [190.0, 36619.0], [191.0, 64337.0], [189.0, 53986.0], [188.0, 55688.0], [186.0, 53937.0], [185.0, 56203.0], [184.0, 66819.0], [192.0, 42230.5], [196.0, 40649.0], [197.0, 41722.0], [198.0, 40824.0], [199.0, 60644.0], [195.0, 62195.0], [194.0, 62527.0], [193.0, 62617.0], [204.0, 40215.0], [203.0, 40272.5], [206.0, 40699.0], [207.0, 60590.0], [205.0, 46856.0], [202.0, 60971.0], [201.0, 61694.0], [200.0, 61121.0], [208.0, 40597.5], [215.0, 31444.25], [214.0, 29502.0], [213.0, 60423.0], [212.0, 59657.0], [211.0, 59479.0], [210.0, 60320.0], [209.0, 60239.0], [220.0, 40590.5], [223.0, 61138.0], [222.0, 60053.0], [221.0, 58966.0], [219.0, 61072.0], [218.0, 59497.0], [217.0, 59386.0], [216.0, 59309.0], [230.0, 41136.5], [231.0, 40165.5], [229.0, 57709.0], [228.0, 59733.0], [227.0, 59822.0], [226.0, 58730.0], [225.0, 58453.0], [224.0, 60619.0], [234.0, 29889.2], [233.0, 31912.25], [239.0, 30320.6], [238.0, 34835.0], [237.0, 34497.333333333336], [236.0, 40121.5], [235.0, 34411.0], [232.0, 57126.0], [240.0, 29962.0], [241.0, 41899.333333333336], [247.0, 47273.45833333333], [246.0, 46848.70588235294], [245.0, 46625.333333333336], [244.0, 49203.09090909091], [243.0, 50415.28571428572], [242.0, 48145.8], [249.0, 34541.83050847457], [255.0, 28741.76363636364], [254.0, 25610.874999999993], [253.0, 30445.46268656717], [252.0, 25251.202702702703], [251.0, 26175.488095238103], [250.0, 31203.054794520536], [248.0, 41662.97560975609], [269.0, 21726.873873873872], [258.0, 22159.70422535212], [257.0, 26335.21153846153], [256.0, 22661.949999999997], [259.0, 27761.109756097565], [263.0, 25923.44827586206], [262.0, 27687.250000000007], [261.0, 25231.29545454545], [260.0, 25726.414893617017], [265.0, 19512.96341463415], [264.0, 22868.86419753086], [267.0, 24949.076923076915], [266.0, 28788.121212121212], [268.0, 15837.387755102041], [270.0, 24250.624999999996], [271.0, 25462.855555555565], [272.0, 23923.71052631579], [273.0, 23568.687499999993], [277.0, 24958.67272727272], [276.0, 23947.738461538447], [275.0, 16328.395061728399], [284.0, 14596.411764705881], [287.0, 19375.75], [286.0, 32024.42857142857], [285.0, 16904.692307692305], [274.0, 22131.299999999992], [280.0, 19560.67272727273], [281.0, 14137.871794871791], [282.0, 20000.611111111102], [283.0, 17869.090909090908], [279.0, 18726.037735849055], [278.0, 17704.578125000007], [288.0, 12772.2], [289.0, 2383.0], [1.0, 60018.0]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}, {"data": [[251.66166666666672, 27512.108333333388]], "isOverall": false, "label": "myABFlex Load Test-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 289.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 318.0, "minX": 1.69693176E12, "maxY": 20794.066666666666, "series": [{"data": [[1.69693176E12, 8112.233333333334], [1.69693194E12, 18917.366666666665], [1.69693182E12, 18139.666666666668], [1.696932E12, 19603.4], [1.69693188E12, 20794.066666666666], [1.69693206E12, 8833.633333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.69693176E12, 318.0], [1.69693194E12, 572.0], [1.69693182E12, 568.0], [1.696932E12, 524.0], [1.69693188E12, 556.0], [1.69693206E12, 544.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69693206E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16385.569852941175, "minX": 1.69693176E12, "maxY": 46696.240687679114, "series": [{"data": [[1.69693176E12, 16385.569852941175], [1.69693194E12, 27537.31069609509], [1.69693182E12, 25662.001754385976], [1.696932E12, 25718.077702702692], [1.69693188E12, 25016.7882165605], [1.69693206E12, 46696.240687679114]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69693206E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15431.147058823526, "minX": 1.69693176E12, "maxY": 46161.37535816617, "series": [{"data": [[1.69693176E12, 15431.147058823526], [1.69693194E12, 26316.988115449905], [1.69693182E12, 24403.810526315814], [1.696932E12, 24396.202702702678], [1.69693188E12, 23637.184713375806], [1.69693206E12, 46161.37535816617]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69693206E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 984.3235294117649, "minX": 1.69693176E12, "maxY": 1716.4904458598726, "series": [{"data": [[1.69693176E12, 984.3235294117649], [1.69693194E12, 1473.8539898132437], [1.69693182E12, 1424.3561403508775], [1.696932E12, 1611.6047297297291], [1.69693188E12, 1716.4904458598726], [1.69693206E12, 1129.4613180515755]], "isOverall": false, "label": "myABFlex Load Test", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69693206E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1797.0, "minX": 1.69693176E12, "maxY": 74580.0, "series": [{"data": [[1.69693176E12, 41308.0], [1.69693194E12, 61398.0], [1.69693182E12, 59815.0], [1.696932E12, 62131.0], [1.69693188E12, 60663.0], [1.69693206E12, 74580.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.69693176E12, 35171.0], [1.69693194E12, 57952.3], [1.69693182E12, 55684.5], [1.696932E12, 58967.5], [1.69693188E12, 57316.5], [1.69693206E12, 63618.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.69693176E12, 39681.400000000016], [1.69693194E12, 60474.09], [1.69693182E12, 59075.7], [1.696932E12, 60842.85], [1.69693188E12, 60010.01999999999], [1.69693206E12, 67748.11999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.69693176E12, 35843.0], [1.69693194E12, 58613.75], [1.69693182E12, 57212.75], [1.696932E12, 59453.35], [1.69693188E12, 58518.700000000004], [1.69693206E12, 64374.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.69693176E12, 1797.0], [1.69693194E12, 47064.0], [1.69693182E12, 36314.0], [1.696932E12, 46467.0], [1.69693188E12, 43398.0], [1.69693206E12, 46856.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.69693176E12, 26504.0], [1.69693194E12, 54314.0], [1.69693182E12, 51173.5], [1.696932E12, 55032.0], [1.69693188E12, 53552.0], [1.69693206E12, 59480.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69693206E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2257.0, "minX": 1.0, "maxY": 55587.5, "series": [{"data": [[2.0, 50419.0], [8.0, 54058.0], [9.0, 52165.0], [10.0, 55587.5], [11.0, 52302.0], [3.0, 54532.0], [12.0, 53623.5], [13.0, 53286.0], [14.0, 54459.0], [15.0, 54326.5], [1.0, 54891.0], [4.0, 55285.0], [16.0, 53469.0], [17.0, 53935.0], [18.0, 53336.5], [19.0, 50859.0], [5.0, 55077.5], [20.0, 53045.0], [21.0, 50275.0], [22.0, 52523.5], [6.0, 53914.5], [25.0, 54887.0], [7.0, 54397.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 2466.0], [9.0, 2344.0], [10.0, 2304.0], [11.0, 2324.5], [12.0, 2302.5], [13.0, 2325.0], [14.0, 2323.5], [15.0, 2349.0], [4.0, 2319.0], [16.0, 2341.0], [1.0, 2360.0], [17.0, 2344.0], [18.0, 2332.0], [19.0, 2293.0], [5.0, 2296.0], [20.0, 2386.0], [21.0, 2510.0], [22.0, 2262.5], [6.0, 2355.5], [25.0, 2257.0], [7.0, 2516.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 55587.5, "series": [{"data": [[2.0, 50419.0], [8.0, 54058.0], [9.0, 52165.0], [10.0, 55587.5], [11.0, 52302.0], [3.0, 54532.0], [12.0, 53623.5], [13.0, 53286.0], [14.0, 54459.0], [15.0, 54326.5], [1.0, 54891.0], [4.0, 55285.0], [16.0, 53468.0], [17.0, 53935.0], [18.0, 53336.5], [19.0, 50859.0], [5.0, 55077.5], [20.0, 53045.0], [21.0, 50275.0], [22.0, 52523.5], [6.0, 53914.5], [25.0, 54887.0], [7.0, 54397.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [4.0, 0.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [5.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [6.0, 0.0], [25.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.69693176E12, "maxY": 10.0, "series": [{"data": [[1.69693176E12, 8.733333333333333], [1.69693194E12, 10.0], [1.69693182E12, 10.0], [1.696932E12, 10.0], [1.69693188E12, 10.0], [1.69693206E12, 1.2666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69693206E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.69693176E12, "maxY": 5.833333333333333, "series": [{"data": [[1.69693176E12, 2.65], [1.69693194E12, 4.766666666666667], [1.69693182E12, 4.733333333333333], [1.696932E12, 4.366666666666666], [1.69693188E12, 4.633333333333334], [1.69693206E12, 4.533333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.69693176E12, 1.8833333333333333], [1.69693194E12, 5.05], [1.69693182E12, 4.766666666666667], [1.696932E12, 5.5], [1.69693188E12, 5.833333333333333], [1.69693206E12, 1.2833333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.69693206E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.69693176E12, "maxY": 5.833333333333333, "series": [{"data": [[1.69693176E12, 2.65], [1.69693194E12, 4.766666666666667], [1.69693182E12, 4.733333333333333], [1.696932E12, 4.366666666666666], [1.69693188E12, 4.633333333333334], [1.69693206E12, 4.533333333333333]], "isOverall": false, "label": "myABFlex Load Test-success", "isController": false}, {"data": [[1.69693176E12, 1.8833333333333333], [1.69693194E12, 5.05], [1.69693182E12, 4.766666666666667], [1.696932E12, 5.5], [1.69693188E12, 5.833333333333333], [1.69693206E12, 1.2833333333333334]], "isOverall": false, "label": "myABFlex Load Test-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69693206E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.69693176E12, "maxY": 5.833333333333333, "series": [{"data": [[1.69693176E12, 2.65], [1.69693194E12, 4.766666666666667], [1.69693182E12, 4.733333333333333], [1.696932E12, 4.366666666666666], [1.69693188E12, 4.633333333333334], [1.69693206E12, 4.533333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.69693176E12, 1.8833333333333333], [1.69693194E12, 5.05], [1.69693182E12, 4.766666666666667], [1.696932E12, 5.5], [1.69693188E12, 5.833333333333333], [1.69693206E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.69693206E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

